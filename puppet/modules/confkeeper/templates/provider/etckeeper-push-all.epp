<%-|
  Confkeeper::GitRepositories $repositories,
  Array[String[1], 1]         $git_ssh_envvars,
  String[1]                   $collector_address,
|-%>
#!/bin/sh

### This file is managed by Puppet, don't edit it. ###

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"
export LC_ALL='C'
<%- $git_ssh_envvars.each |$envvar| { -%>
export <%= $envvar %>
<%- } -%>
set -e

me=$(id --user --name)

if [ "$me" != 'root' ]
then
    printf "Sorry, only root can run this script.\n" >&2
    exit 1
fi

SCRIPT_NAME="${0##*/}"

print_help () {
    cat <<EOF
The syntax is:
    $SCRIPT_NAME --help
    $SCRIPT_NAME [--verbose|--debug]

EOF
}

if ! TEMP=$(getopt -o "h,v,d" -l "help,verbose,debug" -n "$SCRIPT_NAME" -- "$@")
then
    echo "Syntax error with $SCRIPT_NAME command." >&2
    exit 1
fi

eval set -- "$TEMP"

# Some default values.
VERBOSE='false'
DEBUG='false'

while true
do
    case "$1" in

        -v|--verbose)
            VERBOSE='true'
            shift 1
        ;;

        -d|--debug)
            DEBUG='true'
            shift 1
        ;;

        --help|-h)
            print_help
            exit 0
        ;;

        --)
            shift 1
            break
        ;;

    esac

done

if "$DEBUG"
then
    # Debug mode.
    set -x
elif "$VERBOSE"
then
    # Verbose mode, no specific setting.
    true
else
    # Default mode, only stderr is displayed.
    exec >/dev/null
fi

OLD_IFS="$IFS"
LINE_FEED='
'
IFS="$LINE_FEED"

REPOSITORIES='
<%- $repositories.each |$path, $settings| { -%>
<%= $path %>|git@<%= $collector_address %>:<%= $settings['relapath'] %>
<%- } -%>
'

RV='0'


for repository in $REPOSITORIES
do
    dir="${repository%%|*}"
    git_origin="${repository#*|}"

    if [ ! -d "$dir" ]
    then
        printf 'Sorry, the path "%s" must be a directory.\n' "$dir" >&2
        RV='1'
        continue # next repository
    fi

    # Path cleaning (remove the trailing slash if present etc).
    dir=$(readlink -f "$dir")

    printf 'Handle of "%s".\n' "$dir"

    # Specific handle if the repository is /usr/local. In
    # this case, we make a copy of all bash histories in
    # /usr/local/ before any commit.
    if [ "$dir" = '/usr/local' ]
    then
        mkdir -p --mode='0700' '/usr/local/bash-history'

        for bash_history in '/root/.bash_history' /home/*/.bash_history
        do

            # Maybe root has no .bash_history yet, or maybe
            # there is no .bash_history in /home (in this
            # case "$bash_history" = '/home/*/.bash_history').
            [ ! -f "$bash_history" ] && continue

            if [ "$bash_history" = '/root/.bash_history' ]
            then
                username='root'
            else
                username="${bash_history#/home/}"
                username="${username%/.bash_history}"
            fi

            bash_history_copy="/usr/local/bash-history/$username"

            [ ! -f "$bash_history_copy" ] && touch "$bash_history_copy"
            chmod '0600' "$bash_history_copy"

            if ! diff -q "$bash_history" "$bash_history_copy"
            then
                cp "$bash_history" "$bash_history_copy"
            fi
        done
    fi

    # On Ubuntu Trusty, by default /etc is initialized with
    # the VCS bzr after the etckeeper installation.
    if [ -d "${dir}/.bzr" ]
    then
        rm -rf --one-file-system "${dir}/.bzr"
        rm -f "${dir}/.bzrignore"
        rm -f "${dir}/etc/.etckeeper"
    fi

    # Normally, the git repository should be already
    # initialized by Puppet.
    [ ! -d  "${dir}/.git" ] && etckeeper init -d "$dir"

    (
        cd "$dir"

        current_git_origin=$(git config --local --get remote.origin.url || true)

        if [ "$git_origin" != "$current_git_origin" ]
        then
            [ -n "$current_git_origin" ] && git remote remove origin
            git remote add origin "$git_origin"
        fi

        if [ 'simple' != "$(git config --local --get push.default)" ]
        then
            git config --local push.default 'simple'
        fi

        if etckeeper unclean -d "$dir"
        then
            etckeeper commit -d "$dir" "Automatic commit via ${SCRIPT_NAME}" || true
        fi
        # With PUSH_REMOTE="origin", the push will be triggered
        # automatically during the "etckeeper commit" command. So
        # this line below is redundant. But if the commit has worked
        # and the push has failed, the next times, the "etckeeper
        # unclean" command returns 0 no longer and the push will be
        # never made. So we force a push here at each time.
        timeout --signal TERM --kill-after 40s 20s git push origin master
    )

    unset -v dir
    unset -v git_origin

done

IFS="$OLD_IFS"

exit "$RV"


