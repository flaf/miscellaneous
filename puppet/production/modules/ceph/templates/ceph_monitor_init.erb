#!/bin/s
### This is a file managed by Puppet, don't edit it. ###
<%-
    monitor_init    = scope['::ceph::monitor_init']
    monitors        = scope['::ceph::monitors']
    monitor_address = monitors[monitor_init]['address']
-%>

SPECIFIC_SHORT_OPTIONS='i:'
SPECIFIC_LONG_OPTIONS='id:'
SPECIFIC_SYNOPSIS='[--id <num>]'

GET_SPECIFIC_OPTIONS () {
    case "$1" in

        --id|-i)
            id="$2"
            return 2
        ;;

    esac
    return 0
}

. <%= @ceph_script_common %>

if ! check_id "$id"
then
    printf "The value of the option --id must be a integer.\n"
    printf "End of the script.\n"
    exit 1
fi

check_working_dir "$id"


# The name of the cluster.
cluster='<%= cluster_name %>'

# The hostname of the initial monitor.
monitor_init='<%= monitor_init %>'

# The ID of the initial monitor.
monitor_id='<%= monitor_id %>'

# The IP address of the initial monitor.
monitor_address='<%= monitor_address %>'


SCRIPT_NAME=${0##*/}
export LC_ALL=C
export PATH='/usr/sbin:/usr/bin:/sbin:/bin'

options_list='help,test'

if ! TEMP=$(getopt -o "h" -l "$options_list" -n "$SCRIPT_NAME" -- "$@")
then
    echo "Syntax error with $SCRIPT_NAME command." >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP

# Default value.
test=false

while true
do
    case "$1" in

        --test)
            test=true
            shift 1
        ;;

        --help|-h)
            echo "The syntax is:"
            echo ""
            echo "    1. $SCRIPT_NAME --test"
            echo "    2. $SCRIPT_NAME"
            echo ""
            echo "1. To test if it's possible to initialize monitor."
            echo "2. To initialize monitor."
            exit 0
        ;;

        --)
            shift 1
            break
        ;;

    esac
done

test_mon_dir () {
    if [ -d "/var/lib/ceph/mon/$cluster-$monitor_id" ]
    then
        # The monitor working directory already exists.
        return 0
    else
        # The monitor working directory doesn't exist.
        return 1
    fi
}

if "$test"
then
    if test_mon_dir
    then
        printf "The monitor working directory already exists.\n"
        exit 1
    else
        printf "Ok, the monitor working directory doesn't exist yet.\n"
        exit 0
    fi
else
    # No test, but we are still going to test.
    if test_mon_dir
    then
        printf "Sorry but the monitor working directory already exists.\n"
        printf "End of the script.\n"
        exit 1
    fi
fi

# Create a file which defines the rights of the monitors in
# the cluster. A key is automatically generated. This key
# will be shared with the monitors to ensure authentication
# between them (to ensure that the monitors belong to the
# same cluster).
ceph-authtool --create-keyring "/tmp/$cluster.mon.keyring" \
    -n mon. --cap mon 'allow *' --gen-key

# Below, the same command where the key is explicitly provided
# with the --add-key option.
#
#   ceph-authtool --create-keyring "/tmp/$cluster.mon.keyring" \
#        -n mon. --cap mon 'allow *' --add-key "$monitors_key"

# This command just appends the contents of the file given by
# the --import-keyring option to the file given as argument.
ceph-authtool --import-keyring "/etc/ceph/$cluster.client.admin.keyring" \
     "/tmp/$cluster.mon.keyring"

# Generate a monitor map which represents the cluster
# topology regarding the monitors. Currently, the topology
# will be very simple: just one monitor. The generated file
# is non human readable.
monmaptool --create --add "$monitor_id" "$monitor_address" \
    --fsid "$fsid" "/tmp/monmap"

# Initialization of the monitor working directory in
# "/var/lib/ceph/mon/$cluster-$monitor_id". To do that, the command
# provides:
#       - the fsid of the cluster (in the conf file);
#       - the secret shared monitor key and the key of client.admin
#         (in /tmp/$cluster.mon.keyring);
#       - the initial monitor map (in /tmp/monmap)
#
# Note: the key of client.admin is a key shared between the
# administrator (which will use ceph clients in command lines)
# and the monitors.
#
ceph-mon --mkfs -i "$monitor_id" --conf "/etc/ceph/$cluster.conf" \
    --monmap "/tmp/monmap" --keyring "/tmp/$cluster.mon.keyring"  \
    --cluster "$cluster"

# Delete the files in /tmp/.
rm "/tmp/$cluster.mon.keyring"
rm "/tmp/monmap"

# Without these files, the monitor daemon doesn't start.
touch "/var/lib/ceph/mon/$cluster-$monitor_id/done"
touch "/var/lib/ceph/mon/$cluster-$monitor_id/upstart"

# Start the monitor daemon.
stop ceph-mon cluster="$cluster" id="$monitor_id"
sleep 0.5
start ceph-mon cluster="$cluster" id="$monitor_id"


