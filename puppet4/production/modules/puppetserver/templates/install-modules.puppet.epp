<%- |
  $environment_path,
  $puppet_bin_dir,
  $modules_versions,
| -%>
#!<%= $puppet_bin_dir %>/ruby

### This file is managed by Puppet, don't edit it. ###

require 'yaml'

ENV_DIR = '<%= $environment_path %>'
yamls_array = Dir.glob("#{ENV_DIR}/production/hieradata/fqdn/*.yaml")

if yamls_array.empty?
    puts "Sorry, in hieradata in production environment, there is " \
         "no <fqdn>.yaml file. End of the script."
    exit(1)
end

modules_array = []

yamls_array.each do |yaml|

    hash = YAML.load_file(yaml)
    fqdn = File.basename(yaml, '.yaml')

    unless hash.is_a?(Hash) and hash.has_key?('enc_included_classes')
      puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
           "has no `enc_included_classes' entry. End of the script."
      exit(1)
    end

    included_classes = hash['enc_included_classes']

    unless included_classes.is_a?(Array) and not included_classes.empty?
      puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
           "has a `enc_included_classes' entry which is not a non-empty " \
           "arrray. End of the script."
      exit(1)
    end

    included_classes.each do |author_class|

      unless author_class.is_a?(Array) and author_class.size == 2
        puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
             "has a `enc_included_classes' array but this array " \
             "must contain only arrays of size == 2, this is not " \
             "the case currently. End of the script."
        exit(1)
      end

      author_class.each do |e|
        unless e.is_a?(String) and not e.empty?
          puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
               "has a `enc_included_classes' array which contains " \
               "a non-valid data. See the site.pp file to know " \
               "the form of a valid value. End of the script."
          exit(1)
        end
      end

      author           = author_class[0]
      full_class_name  = author_class[1]
      module_name      = full_class_name.gsub(/^(::)?/, '').split('::')[0]
      full_module_name = "#{author}-#{module_name}"

      unless modules_array.include?(full_module_name)
        modules_array.push(full_module_name)
      end

    end
end

# Handle of pinning.
modules_versions = {}
<%- if $modules_versions.empty { -%>
# No pinning defined.
<%- } else { -%>
  <%- $modules_versions.each |$module_name, $version| { -%>
modules_versions['<%= $module_name %>'] = '<%= $version %>'
  <%- } -%>
<%- } -%>

# Installation of the modules.
modules_array.each do |mod|
  cmd = "<%= $puppet_bin_dir %>/puppet module install '#{mod}'"
  if modules_versions.include?(mod)
    version = modules_versions[mod]
    cmd = "#{cmd} --version '#{version}'"
  end
    puts "Run this command => #{cmd}"
    system cmd
end


