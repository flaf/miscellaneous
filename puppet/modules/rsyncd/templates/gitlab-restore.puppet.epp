<%-|
  String[1] $gitlab_backup_dir,
  String[1] $local_backup_dir,
  String[1] $suffix_tar_file,
  String[1] $regex_tar_file,
  String[1] $etcgitlab_targz,
  String[1] $gitlab_secret_file,
|-%>
#!/bin/sh

### This file is managed by Puppet. Please don't edit it. ###

# Note: concerning the restore of Gitlab, there is a
# documentation here:
#
#   https://docs.gitlab.com/ce/raketasks/backup_restore.html#omnibus-installations
#
# and it's very simple in fact. This script is complicated
# but in fact the restore is really simple (see the doc).

set -e

export PATH='/usr/sbin:/usr/bin:/sbin:/bin'
export LC_ALL='C'

gitlab_backup_dir='<%= $gitlab_backup_dir %>'
local_backup_dir='<%= $local_backup_dir %>'
suffix_tar_file='<%= $suffix_tar_file %>'
regex_tar_file='<%= $regex_tar_file %>'
etcgitlab_targz='<%= $etcgitlab_targz %>'
gitlab_secret_file='<%= $gitlab_secret_file %>'

# Check the argument of the timestamp backup.
timestamp="$1"

if [ -z "$timestamp" ]
then
    printf 'You must provide the timestamp backup as (only) argument.\n' >&2
    printf 'Script aborted.\n'                                           >&2
    exit 1
fi

if ! printf '%s\n' "$timestamp" | grep -Eq '^[1-9][0-9]+$'
then
    printf 'The argument must be an integer, especially a timestamp.\n' >&2
    printf 'Script aborted.\n'                                          >&2
    exit 1
fi

targz_file=$(find "$local_backup_dir" -type f -regextype posix-extended \
            -regex "^${local_backup_dir}/.*/${timestamp}${suffix_tar_file}\.gz$")

if [ -z "$targz_file" ]
then
    printf 'Sorry, no backup with the timestamp %s found in %s.\n' \
        "$timestamp" "$local_backup_dir" >&2
    printf 'Script aborted.\n'           >&2
    exit 1
fi

# $targz_file is not empty so we can count the number of
# files found.
n=$(printf '%s\n' "$targz_file" | wc -l)

if [ "$n" != '1' ]
then
    printf 'There is something wrong.\n' >&2
    printf '%s seems to contain several backups with the timestamp %s.\n' \
        "$local_backup_dir" "$timestamp" >&2
    printf 'Script aborted.\n'           >&2
    exit 1
fi

source_backup_dir="${targz_file%/*}"
etcgitlab_targz="${source_backup_dir}/${etcgitlab_targz}"

if [ ! -f "$etcgitlab_targz" ]
then
    printf 'There is something wrong.\n' >&2
    printf 'The backup file %s has no associated file %s.\n' \
        "$targz_file" "$etcgitlab_targz" >&2
    printf 'Script aborted.\n'           >&2
    exit 1
fi

for f in "$targz_file" "$etcgitlab_targz"
do
    mtype=$(file --brief --mime-type "$f")
    if [ "$mtype" != 'application/gzip' ]
    then
        printf 'There is something wrong.\n'                >&2
        printf '%s does not seem to be a gzip file.\n' "$f" >&2
        printf 'Script aborted.\n'                          >&2
        exit 1
    fi
done

foo=$(find "$gitlab_backup_dir" -maxdepth 1 -mindepth 1)

if [ -n "$foo" ]
then
    printf 'There is something wrong.\n'                                             >&2
    printf 'The directory %s must be empty before a restore.\n' "$gitlab_backup_dir" >&2
    printf 'Script aborted.\n'                                                       >&2
    exit 1
fi




########################
### End of the tests ###
########################

printf 'The files used to restore the GitLab server will be:\n'
printf '    i) %s\n' "$targz_file"
printf '   ii) %s\n' "$etcgitlab_targz"
printf '\n'
printf 'You can ensure that:\n'
printf '    1. `gitlab-ctl reconfigure` has been run at least once.\n'
printf '    2. GitLab is running (if not, launch `gitlab-ctl start`)\n'
printf '\n'

unset answer
printf "Can you comfirm that all is OK for you? (yes or whatever)\n"
read answer

if [ "$answer" != 'yes' ]
then
    printf 'Your answer is not "yes", script arborted.\n' >&2
    exit 1
fi



##############################
###     Now all is OK!     ###
### Ready for the restore. ###
##############################


##############################
# 1. The gitlab secret file. #
##############################

tmp_dir=$(mktemp --directory)
cp -a "$etcgitlab_targz" "$tmp_dir"

# The etcgitlab tar file (without the .gz extension).
etcgitlab_tar="$tmp_dir/${etcgitlab_targz##*/}"
etcgitlab_tar="${etcgitlab_tar%.gz}"

tar -zxf "${etcgitlab_tar}.gz" -C "$tmp_dir"
mv "$tmp_dir/$gitlab_secret_file" '/etc/gitlab'
chown 'root:root' "/etc/gitlab/$gitlab_secret_file"
chmod 0600 "/etc/gitlab/$gitlab_secret_file"

rm -r "$tmp_dir"


###########################
# 2. The gitlab tar file. #
###########################
cp -a "$targz_file" "$gitlab_backup_dir"

# backup_file is the name of the file without the .gz extension.
backup_file="$gitlab_backup_dir/${targz_file##*/}"
backup_file="${backup_file%.gz}"

# After that, the back_file is ready.
gunzip "${backup_file}.gz"
chown 'git:git' "$backup_file"
chmod '0600' "$backup_file"

### According to the documentation, these services must be stopped.
### In fact, this is the really gitlab restore part here.
gitlab-ctl stop unicorn && sleep 1
gitlab-ctl stop sidekiq && sleep 1

printf '\n'
gitlab-ctl status || true
printf '\n'

unset answer
printf "Can you comfirm that unicorn and sidekiq are well stopped? (yes or whatever)\n"
read answer

if [ "$answer" != 'yes' ]
then
    printf 'Your answer is not "yes", script arborted.\n' >&2
    exit 1
fi

gitlab-rake gitlab:backup:restore BACKUP="$timestamp" && sleep 1
gitlab-ctl start                                      && sleep 1
gitlab-rake gitlab:check SANITIZE='true'              && sleep 1
### End of the gitlab restore part.

# Cleaning of the backup file.
rm "$backup_file"

printf 'Restore executed without error, all seems OK.\n'
printf 'Now, you should reboot the server and check if all is OK for you.\n'


