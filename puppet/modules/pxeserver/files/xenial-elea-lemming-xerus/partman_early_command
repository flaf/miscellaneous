#!/bin/sh

### This file is managed by Puppet, don't edit it. ###

exec >/tmp/partition.log 2>&1
set -x

parted='parted --script --align=opt'
raid10system='md0'
raid10swap='md1'
raid10backups='md2'


### Remove the RAID volumes if already created. ###

[ -e /dev/$raid10system  ] && mdadm --stop /dev/$raid10system
[ -e /dev/sda3           ] && mdadm --zero-superblock /dev/sda3
[ -e /dev/sdb3           ] && mdadm --zero-superblock /dev/sdb3
[ -e /dev/sdc3           ] && mdadm --zero-superblock /dev/sdc3
[ -e /dev/sdd3           ] && mdadm --zero-superblock /dev/sdd3

[ -e /dev/$raid10swap    ] && mdadm --stop /dev/$raid10swap
[ -e /dev/sda4           ] && mdadm --zero-superblock /dev/sda4
[ -e /dev/sdb4           ] && mdadm --zero-superblock /dev/sdb4
[ -e /dev/sdc4           ] && mdadm --zero-superblock /dev/sdc4
[ -e /dev/sdd4           ] && mdadm --zero-superblock /dev/sdd4

[ -e /dev/$raid10backups ] && mdadm --stop /dev/$raid10backups
[ -e /dev/sda5           ] && mdadm --zero-superblock /dev/sda5
[ -e /dev/sdb5           ] && mdadm --zero-superblock /dev/sdb5
[ -e /dev/sdc5           ] && mdadm --zero-superblock /dev/sdc5
[ -e /dev/sdd5           ] && mdadm --zero-superblock /dev/sdd5


### Create GPT partition on each disk. ###

for i in a b c d
do
    $parted /dev/sd${i} mktable gpt
done


### Partitioning. ###

n='-1'
for letter in a b c d
do

    # With letter == a, n == 0
    # With letter == b, n == 1
    # With letter == c, n == 2
    # With letter == d, n == 3
    n=$((n + 1))

    part_num=1

    # The unused UEFI partitions if one day we decide to enable the Bios-UEFI.
    # No RAID for this partition.
    a=1
    b=$((250 + a)) # Size == 250MiB
    $parted /dev/sd${letter} -- unit MiB mkpart uselessuefi${n} $a $b
    part_num=$((part_num + 1))

    # The biosgrub partitions.
    # No RAID for this partition.
    a=$b
    b=$((1 + a)) # Size == 1MiB
    $parted /dev/sd${letter} -- unit MiB mkpart biosgrub${n} $a $b
    $parted /dev/sd${letter} set $part_num bios_grub on
    part_num=$((part_num + 1))

    # The root partition (will be in a RAID 10 volume).
    a=$b
    b=$((15 * 1024 + a)) # Size == 15GiB (which gives 30GiB in RAID 10)
    $parted /dev/sd${letter} -- unit MiB mkpart system${n} $a $b
    $parted /dev/sd${letter} set $part_num raid on
    part_num=$((part_num + 1))

    # The swap (will be in a RAID 10 volume).
    a=$b
    b=$((4 * 1024 + a)) # Size == 4GiB (which gives 8GiB in RAID 10)
    $parted /dev/sd${letter} -- unit MiB mkpart swap${n} linux-swap $a $b
    $parted /dev/sd${letter} set $part_num raid on
    part_num=$((part_num + 1))

    # The remaining of the disk (will be in a RAID 10 volume).
    a=$b
    b='-1cyl' # The last cylinder
    $parted /dev/sd${letter} -- unit MiB mkpart backups${n} $a $b
    $parted /dev/sd${letter} set $part_num raid on
    part_num=$((part_num + 1))

done


### Creation of the RAID volumes. ###

mdadm --create /dev/$raid10system  --level=raid10 --raid-devices=4 /dev/sda3 /dev/sdb3 /dev/sdc3 /dev/sdd3 --force --run
mdadm --create /dev/$raid10swap    --level=raid10 --raid-devices=4 /dev/sda4 /dev/sdb4 /dev/sdc4 /dev/sdd4 --force --run
mdadm --create /dev/$raid10backups --level=raid10 --raid-devices=4 /dev/sda5 /dev/sdb5 /dev/sdc5 /dev/sdd5 --force --run


### Creation of the file systems. ###

mkfs.xfs -f -L system  /dev/$raid10system
mkfs.xfs -f -L backups /dev/$raid10backups
mkswap -L swap /dev/$raid10swap

# mkfs.vfat doesn't exist during Debian installation.
# Lowercase labels trigger a warning.
mkfs.fat -F 32 -n 'UEFI0' /dev/sda1 # partition unused but hey...
mkfs.fat -F 32 -n 'UEFI1' /dev/sdb1 # partition unused but hey...
mkfs.fat -F 32 -n 'UEFI2' /dev/sdc1 # partition unused but hey...
mkfs.fat -F 32 -n 'UEFI3' /dev/sdd1 # partition unused but hey...

exit 0

