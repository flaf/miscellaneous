<%-|
  Integer[1]            $max_groups,
  Puppetserver::Profile $profile,
  Array[String[1], 1]   $datacenters,
|-%>
#!/opt/puppetlabs/puppet/bin/ruby

### This file is managed by Puppet, don't edit it.

require 'yaml'
require 'json'

# The maximum number of hiera groups allowed.
MAX_GROUPS = <%= $max_groups %>

# The absolute path of the directory which contains the ENC script.
ENV_DIR = File.expand_path(File.dirname(__FILE__))

fqdn = ARGV[0]

# Search for the $fqdn.yaml file in hieradata. Exactly only
# one file must exist (not 0 or 2 etc).
files_array = Dir.glob("#{ENV_DIR}/*/hieradata/fqdn/#{fqdn}.yaml")
unless files_array.length == 1
  if files_array.length == 0
    STDERR.puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
                "is absent in all environment directories."
  end
  if files_array.length > 1
    STDERR.puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
                "is duplicated in multiple environment directories."
  end
  exit(1)
end

# There is just one $fqdn.yaml file in hieradata.
yaml_file = files_array[0]

# Get the environment variable via the path of the fqdn.yaml
# file.
regex_end = "/hieradata/fqdn/#{fqdn}.yaml"
environment = yaml_file.sub(/^#{ENV_DIR}\//, '').sub(/#{regex_end}$/, '')

<%- if $profile == 'autonomous' { -%>
# Get the list of all datacenters in hieradata/datacenter/.
# The list must be non empty. A test is made below.
datacenters_array = Dir.glob("#{ENV_DIR}/#{environment}/hieradata/datacenter/*.yaml")
                   .map { |x| x.sub(/^.*\//, '').sub( /\.yaml/, '') }
<%- } else { -%>
# This puppetserver is a puppetserver with the "client"
# profile and the list of datacenters are provided
# explicitly by its "autonomous" puppetserver.
datacenters_array = <%= String($datacenters) %>
<%- } -%>

# Search for keys which match /^enc_/ in the yaml file to
# define the ENC global paramters.
hash = YAML.load_file(yaml_file)

# If the yaml file is empty, hash is nil. Then, we convert
# nil to an empty hash.
if hash.is_a?(NilClass) then hash = {} end

unless hash.is_a?(Hash)
  STDERR.puts "Sorry, in hieradata, the file `#{fqdn}.yaml' " \
              "exists but has a bad yaml syntax."
  exit(1)
end

# The "enc_datacenter" key (with a string value) is required.
unless hash.has_key?('enc_datacenter') and hash['enc_datacenter'].is_a?(String)
  STDERR.puts "Sorry, in hieradata, the file `#{fqdn}.yaml' must have " \
              "a key `enc_datacenter' and its value must be a string."
  exit(1)
end

# If 'enc_groups' key is not present, we add it with the
# empty array value.
unless hash.has_key?('enc_groups') then hash['enc_groups'] = [] end

# The "datacenter" variable will be updated via the key
# "enc_datacenter" in the loop below.
datacenter = nil
parameters_hash = {}




# Only keys which start with "enc_" are handled.
hash.select { |key, value| key =~ /^enc_/ }.each do |key, value|

  key = key.sub(/^enc_/, '')

  # In _any_ case, we can add the value in the parameters hash.
  # We will make some checks after.
  parameters_hash[key] = value

  # The "groups" key is specal because we want to add
  # automatically some groups "dir/common" when it's
  # needed (when there is a group "dir/foo").
  if key == 'groups'

    unless value.is_a?(Array)
      STDERR.puts "Sorry, the enc_groups key must be an array of strings " \
                  "in the `#{fqdn}.yaml' file."
      exit(1)
    end

    value.each do |e|
      unless e.is_a?(String)
        STDERR.puts "Sorry, the enc_groups key must be an array of strings " \
                    "in the `#{fqdn}.yaml' file."
        exit(1)
      end
    end

    if value.uniq.length != value.length
      STDERR.puts "Sorry, there are duplicated groups in the enc_groups " \
                  "key in the `#{fqdn}.yaml' file."
      exit(1)
    end

    additional_common_groups = value.select { |e| e.include?('/') }.map do |e|
      unless e.count('/') == 1
        STDERR.puts "Sorry, the group `#{e}' is not valid in the " \
                    "`#{fqdn}.yaml' file. A group can contain only " \
                    "0 or 1 slash character (max depth is 1)."
        exit(1)
      end
      if e[0] == '/' or e[-1] == '/'
        STDERR.puts "Sorry, the group `#{e}' is not valid in the " \
                    "`#{fqdn}.yaml' file. The first and the last " \
                    "character in the group name can't be a slash."
        exit(1)
      end

      # The name of the group is OK.
      additional_group = e.split('/')[0] + '/common'

      if File.file?("#{ENV_DIR}/#{environment}/hieradata/group/#{additional_group}.yaml")
        # The yaml file exists, we can add the group.
        additional_group
      else
        # The yaml file doesn't exist, we don't add the group.
        nil
      end

    end
    .compact # To remove nil elements.
    .uniq    # To avoid duplicated "dir/common" if the
             # array "value" already contains "dir/a" and
             # "dir/b" (for instance).

    # Add addtional common groups in "value" only if not
    # already present in "value". For instance, if value
    # is equal to [ "foo/common" ], it's useless to add
    # the group "foo/commonce" again.
    additional_common_groups.each do |a_group|
      unless value.include?(a_group)
        value.push(a_group)
      end
    end

    if value.size > MAX_GROUPS
      STDERR.puts "Sorry, the host #{fqdn} belongs to #{value.size} " \
                  "hiera-groups and the maximum allowed is #{MAX_GROUPS}."
      exit(1)
    end

    # == Remark about groups ==
    #
    # Specific handle if key == "groups'.
    # To avoid a ton of warnings in logs like this:
    #
    #     [puppet-server] Scope(Class[main]) Could not look up
    #     qualified variable '::groups_2'
    #
    # we fill the array to a size of MAX_GROUPS with consecutive
    # 'NOT_AVAILABLE' elements which represent a dummy group.
    # It's just to avoid warnings above. If a groups_N variable
    # is not defined, there are warnings in logs. If the groups_N
    # variable is defined to a dummy file, there is no warning.
    #
    completed_array = []
    if MAX_GROUPS - value.size > 0
      completed_array = value + [ 'NOT_AVAILABLE' ]*(MAX_GROUPS - value.size)
    end

    # We want to define the keys "groups_0", "groups_1" etc. where "groups_0"
    # is associated with the first value of the array, "groups_1" the second
    # value of the array etc.
    c = 0
    completed_array.each do |e|
      parameters_hash["#{key}_#{c}"] = e
      c += 1
    end

  end # End of the specific case of the "groups" key.

end




unless parameters_hash.key?('datacenter') and parameters_hash['datacenter'].is_a?(String)
  STDERR.puts "Sorry, the enc_datacenter must be present in the " \
              " `#{fqdn}.yaml' file and must be a string."
  exit(1)
end

datacenter = parameters_hash['datacenter']

unless datacenters_array.include?(datacenter)
  STDERR.puts "Sorry, in hieradata, the file `datacenter/#{datacenter}.yaml' " \
              "doesn't exist whereas the file `#{fqdn}.yaml' contains the " \
              "key `enc_datacenter' with the value `#{datacenter}'. " \
              "If it's correct, the file `datacenter/#{datacenter}.yaml' " \
              "must exist, even an empty yaml file."
  exit(1)
end

parameters_hash['datacenters'] = datacenters_array

final_hash = {
  'environment' => environment,
  'parameters'  => parameters_hash,
}

puts(JSON.pretty_generate(final_hash))
exit(0)


