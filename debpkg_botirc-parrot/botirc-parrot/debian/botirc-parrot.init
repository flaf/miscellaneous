#! /bin/sh

# Copyright: 2013 Francois Lafont <francois.lafont@crdp.ac-versailles.fr>
#
# License: GPL-3.0+
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


### BEGIN INIT INFO
# Provides:          botircd
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Send messages on IRC
# Description:       Send messages on IRC
### END INIT INFO

# Author: François Lafont  <francois.lafont@crdp.ac-versailles.fr>


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Send messages on IRC"
NAME=botirc-parrot
DAEMON=/usr/bin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
USER=root
GROUP=root

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

export PARROT_FIFO PARROT_SERVER PARROT_PORT PARROT_CHANNEL PARROT_PASSWORD




check_variables ()
{
    if [ "$START" != "YES" ]; then
        echo "$NAME not configured to start, please edit /etc/default/$NAME to enable."
        exit 0
    fi

    if [ ! -e "$PARROT_FIFO" ]; then
        echo "Sorry, the '$PARROT_FIFO' file (fifo) doesn't exist."
        exit 2
    fi

    if [ ! -p "$PARROT_FIFO" ]; then
        echo "Sorry, the '$PARROT_FIFO' file isn't a pipe file."
        exit 2
    fi

    if ! getent passwd "$USER" > /dev/null 2>&1; then
        echo "Sorry, the '$USER' user doesn't exist."
        exit 2
    fi

    if ! sudo -u "$USER" [ -r "$PARROT_FIFO" ]; then
        echo "Sorry, the '$USER' user can't read the '$PARROT_FIFO' file."
        exit 2
    fi
}

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started

        check_variables

        start-stop-daemon --start --quiet --pidfile $PIDFILE \
                          --chuid "$USER:$GROUP" --startas "$DAEMON" --test > /dev/null \
        || { echo "$NAME is already running."; return 1; }
        start-stop-daemon --make-pidfile --start --quiet --pidfile $PIDFILE \
                          --chuid "$USER:$GROUP" --background --name "$NAME" \
                          --startas "$DAEMON" -- $DAEMON_ARGS \
        || { echo "$NAME could not be started."; return 2; }
        RETVAL="$?"
        [ "$RETVAL" = 0 ] && { echo "Starting $NAME..."; return 0; }
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}


#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name "$NAME"
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && { echo "$NAME could not be stopped."; return 2; }
    [ "$RETVAL" = 1 ] && { echo "$NAME was already stopped."; return 1; }
    [ "$RETVAL" = 0 ] && { echo "Stopping $NAME..."; }

    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    #start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    #[ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f $PIDFILE
    return "$RETVAL"
}



# Function not used for this daemon.
#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
    #;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    #log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
