<%-|
  String $non_bare_repos_path,
|-%>
#!/bin/sh

### This file is managed by Puppet, don't edit it. ###

export PATH='/usr/local/bin:/usr/bin:/bin'
export LC_ALL='C'
set -e

if [ "$(id -un)" != 'git' ]
then
    printf 'Sorry this command can be executed only by the git user.\n' >&2
    exit 1
fi

non_bare_repos_path='<%= $non_bare_repos_path %>'
mkdir -p --mode='0700' "$non_bare_repos_path"

trashdir='/home/git/old'
f_repos=$(mktemp)
f_phy_repos=$(mktemp)

mkdir --mode='0700' -p "$trashdir"
gitolite list-repos     | sort > "$f_repos"
gitolite list-phy-repos | sort > "$f_phy_repos"

# We take repos in f_phy_repos but not in f_repos.
for repo in $(comm -23 "$f_phy_repos" "$f_repos")
do
    src="/home/git/repositories/${repo}.git"
    non_bare_src="${non_bare_repos_path}/${repo}.git"
    src_cleaned=$(readlink -f "$src")
    date=$(date '+%Y-%m-%d-%Hh%M.%S')
    dest="${trashdir}/${repo}.git.${date}"
    non_bare_dest="${trashdir}/${repo}.git.nonbare.${date}"

    if [ "$src" != "$src_cleaned" ]
    then
        printf "There is something wrong with the repository \"%s\".\n" "$repo" >&2
        printf "The name of this repository appears incorrect.\n"               >&2
        exit 2
    fi
    if [ ! -d "$src" ]
    then
        printf "The directory \"%s\" doesn't exist which is not normal.\n" "$repo" >&2
        exit 3
    fi

    basename_dest="${dest%/*}"
    mkdir --mode='0700' -p "$basename_dest"
    mv "$src" "$dest"
    mv "$non_bare_src" "$non_bare_dest"

done

rm "$f_repos" "$f_phy_repos"

# We remove all empty directory directly at the root of
# /home/git/repositories/.
find /home/git/repositories/ -mindepth 1 -maxdepth 1 -type d -empty -delete

# We remove all empty directory directly at the root of
# $non_bare_repos_path.
find "$non_bare_repos_path" -mindepth 1 -maxdepth 1 -type d -empty -delete


