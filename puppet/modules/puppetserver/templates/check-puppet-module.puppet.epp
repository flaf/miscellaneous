<%- |String[1] $puppet_bin_dir| -%>
#!/bin/sh

### This file is managed by Puppet, don't edit it. ###

export LC_ALL='C'
export PATH='<%= $puppet_bin_dir %>:/usr/sbin:/usr/bin:/sbin:/bin'
forge_url=$(puppet config print --section=main module_repository)
red='\033[1;31m'
green='\033[1;32m'
reset='\033[00m'

# Example:
#
#    print_param "full name" "flaf-mod" "$green"
#
print_param () {
    printf "%-18s => %b%s%b\n" "$1" "$3" "$2" "$reset"
}

# Print a pretty title.
print_title () {
    local title n line
    title="| $1 |"
    n=$(printf "$title" | wc --chars)
    line=$(printf "%${n}s" '' | tr ' ' '-' | sed -r 's/^./+/;s/.$/+/')
    printf '\n'
    printf '         %s\n' "$line"
    printf '(#%+2s) => %s\n' "$c" "$title"
    printf '         %s\n' "$line"
}


### The options. ###

# Default values.
filter_name='.*'
quiet='false'
brief='false'

SCRIPT_NAME=${0##*/}
if ! TEMP=$(getopt -o "q,b" -l "filter-name:,quiet,brief" -n "$SCRIPT_NAME" -- "$@")
then
    echo "Syntax error with $SCRIPT_NAME command."
    exit 3
fi

eval set -- "$TEMP"
unset TEMP

while true
do
    case "$1" in

        --filter-name)
            filter_name="$2"
            shift 2
        ;;

        --quiet|-q)
            quiet='true'
            shift 1
        ;;

        --brief|-b)
            brief='true'
            shift 1
        ;;

        --)
            shift 1
            break
        ;;

    esac
done
### End of the handle of the options. ###



c=0
for d in "$@"
do

    if [ ! -d "$d" ]
    then
        if ! "$quiet"
        then
            printf "%bSorry, %s isn't a directory.%b\n" "$red" "$d" "$reset"
            printf '\n'
        fi
        continue
    fi

    # If not, we replace "$d" by an absolute path (better
    # than relative path).
    d=$(cd "$d"; pwd)

    if [ ! -e "$d/metadata.json" ]
    then
        if ! "$quiet"
        then
            printf "%bSorry, no metadata.json in %s.%b\n" "$red" "$d" "$reset"
            printf '\n'
        fi
        continue
    fi

    if [ -e "$d/checksums.json" ]
    then
        checksums=true
        checksums_file='present'
        checksums_color="$green"
    else
        checksums=false
        checksums_file='ABSENT'
        checksums_color="$red"
    fi

    name=$(cat "$d/metadata.json" | jq --raw-output '.["name"]')

    printf '%s\n' "$name" | grep -Eq "$filter_name" || continue

    # All "continue" instructions are done, we can increment c.
    c=$((c + 1))

    version=$(cat "$d/metadata.json" | jq --raw-output '.["version"]')
    available_version=$(curl --silent "$forge_url/v3/modules/$name" | jq --raw-output '.["current_release"]["version"]')

    if [ "$available_version" = 'null' ]
    then
      available_version='NOT FOUND IN THE FORGE'
      version_color="$red"
    elif dpkg --compare-versions "$available_version" gt "$version"
    then
      # $available_version grower than $version.
      version_color="$red"
    else
      version_color="$green"
    fi

    if "$brief"
    then
        print_param "module full name" "$name" "$reset"
        print_param "version" "$version" "$reset"
        print_param "available version" "$available_version" "$version_color"
    else
        print_title "$d"
        print_param "full name" "$name" "$reset"
        print_param "metadata.json" "present" "$reset"
        print_param "checksums.json" "$checksums_file" "$checksums_color"
        print_param "version" "$version" "$reset"
        print_param "available version" "$available_version" "$version_color"
    fi

    "$checksums" && (o=$(cd /tmp && puppet module changes "$d" 2>&1); print_param "checksums" "$o" "$reset")
    printf '\n'

done


