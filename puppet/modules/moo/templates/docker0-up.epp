<%-|
  String[1] $docker_iface,
  String[1] $docker_bridge_network,
  String[1] $docker_gateway,
  Boolean   $iptables_allow_dns,
|-%>
#!/bin/sh

### This file is managed by Puppet, don't edit it. ###

# Normally this script is just relevant during the boot.
# All scripts in /etc/network/if-up.d/ are called with
# IFACE = '--all' (see interfaces(5) manual).
if [ "$IFACE" != '--all' ]
then
    exit 0
fi

# The "docker" interface. The only interface a docker
# container can use to contact the "outside".
docker_iface='<%= $docker_iface %>'

# The CIDR address of the internal "docker" network.
docker_network='<%= $docker_bridge_network %>'

# The routing table fo dockers.
docker_table='dockertable'

# Remark: -D (delete) and -A (append) are just to have a
# idempotent script.

# Dockers are allowed to ping any cargo interfaces.
iptables -t filter -D INPUT -i docker0 -p icmp --icmp-type any -j ACCEPT
iptables -t filter -A INPUT -i docker0 -p icmp --icmp-type any -j ACCEPT

<%- if $iptables_allow_dns { -%>
# Dockers will be able to contact the DNS server of cargo.
iptables -t filter -D INPUT -i docker0 -p udp --dport 53 -j ACCEPT
iptables -t filter -A INPUT -i docker0 -p udp --dport 53 -j ACCEPT

<%- } -%>
# But by default any packet from docker0 to cargo local process will be dropped.
iptables -t filter -D INPUT -i docker0 -j DROP
iptables -t filter -A INPUT -i docker0 -j DROP

# No ip-forwarding from docker0 to ifaceXXX unless ifaceXXX
# is the "docker" interface defined above.
iptables -t filter -D FORWARD -i docker0 ! -o "$docker_iface" -j DROP || true
iptables -t filter -A FORWARD -i docker0 ! -o "$docker_iface" -j DROP

# Masquerading only for the dedicated "docker" interface.
iptables -t nat -D POSTROUTING -s "$docker_network" -o "$docker_iface" -j MASQUERADE || true
iptables -t nat -A POSTROUTING -s "$docker_network" -o "$docker_iface" -j MASQUERADE

# A docker can just contact hosts via the "docker" interface.
# Now, we need to define a specific default route for the dockers
# (which use only the "docker" interface).

# We use a specific table, not the "main" table.
# To have a idempotent script, we flush the "dockertable".
# and after, in this table, we add a default route.
ip route flush table "$docker_table"
ip route add default via '<%= $docker_gateway %>' dev "$docker_iface" table "$docker_table"

# If the incoming interface is "docker0", the paquet uses the docker table.
ip rule del iif docker0 lookup "$docker_table" 2>/dev/null || true
ip rule add iif docker0 lookup "$docker_table"

# We flush the cache just in case...
ip route flush cache


