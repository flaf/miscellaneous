<%- |
  $gitdir,
  $modulesdir,
  $giturlsfile,
  $pause,
  $release_retention,
  $puppet_bin_dir,
  $update_pp_modules_pid,
| -%>
#!/bin/bash
### This file is managed by Puppet, don't edit it ###

echo $$ ><%= $update_pp_modules_pid %>
export PATH='<%= $puppet_bin_dir %>:/usr/sbin:/usr/bin:/sbin:/bin'

gitdir='<%= $gitdir %>'
modulesdir='<%= $modulesdir %>'
giturlsfile='<%= $giturlsfile %>'
pause='<%= $pause %>'
release_retention='<%= $release_retention %>'

user=$(id -un)
group=$(id -gn)

if [ "$user" = 'puppetforge' ] && [ "$group" = 'puppetforge' ]
then
    # OK.
    true
else
    echo "Sorry, you must run this program with the puppetforge account." >&2
    exit 1
fi


keep_release () {
    local targz_file="$1"
    shift
    local current_version
    current_version="${targz_file##*-}"          # remove all except -$version.tar.gz
    current_version="${current_version%.tar.gz}" # remove the ".tar.gz" part.
    printf '%s\n' "$current_version"
    for version in "$@"
    do
        if [ "$current_version" = "$version" ]
        then
            # We keep the release.
            return 0
        fi
    done
    return 1
}


while true
do

    # Get modules.
    while read # See the input of this read at the end of this loop below.
    do

        # /!\ Yes, this is only bash compatible.
        url="$REPLY"

        # Remove comments and remove spaces.
        url=$(echo "$url" | sed -r 's/([^#]*)[[:space:]]*#?.*$/\1/')
        url=$(echo "$url" | sed -r 's/[[:space:]]//g')

        # It after the previous cleanup the line is empty,
        # we can pass to the next line.
        [ -z "$url" ] && continue

        repo_name=$(echo "$url" | sed -r 's|^.*/([-a-z0-9_]+)\.git$|\1|')
        printf "Handle of [%s]\n" "$repo_name"

        if [ ! -d "$gitdir/$repo_name" ]
        then
            printf "[%s] The repository doesn't exist => git clone...\n" "$repo_name"
            timeout --kill-after=20s 40s git clone $url "$gitdir/$repo_name" >/dev/null || continue
        fi

        cd "$gitdir/$repo_name"

        printf "[%s] git pull...\n" "$repo_name"
        timeout --kill-after=20s 40s git pull >/dev/null

        tags=$(git tag | sort -V | tail -n "$release_retention")
        name=$(cat metadata.json | jq --raw-output '.name')

        # We remove old modules.
        need_restart='false'
        for module_release in "$modulesdir/$name-"*".tar.gz"
        do
            [ "$module_release" = "$modulesdir/$name-*.tar.gz" ] && continue
            if ! $v=$(keep_release "$module_release" $tags)
            then
                # The release is too old. We remove it.
                printf 'The release %s of the module %s it too old. Removed...' "$v" "$name"
                rm -f "$module_release"
                need_restart='true'
            fi
        done

        "$need_restart" && sudo /usr/sbin/service puppetforge restart
        printf 'Service puppetforge restarted...\n'

        for tag in $tags
        do
            full_name="$name-$tag"

            if [ -f "$modulesdir/$full_name.tar.gz" ]
            then
              printf "[%s] already stored. Next...\n" "$full_name"
              continue
            fi

            # The principle here is: we don't touch to the repository "$gitdir/$repo_name"
            # except to make "git pull" and that's all. So commands like "git reset..."
            # will be made in temporary copy. It's more sure.
            rm -fr "/tmp/$repo_name"
            cp -r "$gitdir/$repo_name" /tmp
            (cd "/tmp/$repo_name" && git reset --hard "$tag" >/dev/null)

            version=$(cat "/tmp/$repo_name/metadata.json" | jq --raw-output '.version')

            # The tag must match with the version number.
            if [ "$version" != "$tag"  ]
            then
                printf "[%s] tag=%s and version==%s don't match. Next...\n" "$full_name" "$tag" "$version"
                rm -rf "/tmp/$repo_name"
                continue
            else
                printf "[%s] tag=%s and version==%s match. This version will be stored...\n" "$full_name" "$tag" "$version"
            fi

            mkdir "$modulesdir/$full_name"
            # With find, we copy the .git/ directory too.
            (cd "/tmp/$repo_name" && find . -mindepth 1 -maxdepth 1 -exec cp -r '{}' "$modulesdir/$full_name/" \;)

            # We add a simple file to identify where the module come from.
            flag_file=".from-$(hostname -f)"
            touch "$modulesdir/$full_name/$flag_file"

            # The goal is that "git status" reports no change when the
            # module is just installed via the puppetforge. But we add
            # new files in this repo. A fist way is to add or edit a
            # .gitignore file, but this file can be versioned so it's
            # not a good idea. The right way is to use the file
            # .git/info/exclude.

            # This file is a list of files that are not in .gitignore
            # (which can be versioned), but which you want to exclude on
            # your machine's copy of the repository. From the docs:
            #
            #       Patterns which are specific to a particular
            #       repository but which do not need to be shared with
            #       other related repositories (e.g., auxiliary files
            #       that live inside the repository but are specific to
            #       one user's workflow) should go into the
            #       $GIT_DIR/info/exclude file.
            #
            # That file .git/info/exclude can not be versioned because
            # it's in the .git directory.
            #
            cat >>"$modulesdir/$full_name/.git/info/exclude" <<EOF
checksums.json
$flag_file
EOF

            # The goal: generate the `checksums.json` file
            # in the pkg/ directory. This file is created by
            # the `puppet module build` command.
            #
            # Normally, the `metadata.json` file generated
            # in pkg/ is the same as the `metadata.json`
            # file of the current module but the form can be
            # different. For instance the number of empty
            # lines at the end of the file can be different
            # so that the md5sum of this file can be
            # different. So, instead to copy verbatim the
            # `checksums.json` file, we need to update the
            # md5sum value of the `metadata.json` entry in
            # the `checksums.json` file.
            puppet module build "$modulesdir/$full_name/"
            md5sum=$(md5sum "$modulesdir/$full_name/metadata.json" | awk '{print $1}')
            jq ".[\"metadata.json\"]=\"${md5sum}\""                    \
                "$modulesdir/$full_name/pkg/$full_name/checksums.json" \
                >"$modulesdir/$full_name/checksums.json"

            # Now, we can remove the pkg/ directory.
            rm -rf --one-file-system "$modulesdir/$full_name/pkg"

            # The archive must be prefixed by the $full_name.
            (cd "$modulesdir" && tar -zcf "$modulesdir/$full_name.tar.gz" "$full_name")

            rm -rf "$modulesdir/$full_name"
            rm -rf "/tmp/$repo_name"
            printf "[%s] Module stored. Next if it exists...\n" "$full_name"
        done

    done <"$giturlsfile"

    sleep "$pause"

done


