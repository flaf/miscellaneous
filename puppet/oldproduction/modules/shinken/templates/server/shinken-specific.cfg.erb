### This is a file managed by Puppet, don't edit it! ###

#=============================================================================
# ARBITER
#=============================================================================
# Description: the Arbiter is responsible for:
# - Loading, manipulating and dispatching the configuration
# - Validating the health of all other Shinken daemons
# - Issuing global directives to Shinken daemons (kill, activate-spare, etc.)
#=============================================================================
# IMPORTANT: If you use several arbiters you MUST set the host_name on each
# servers to its real DNS name ('hostname' command).
#=============================================================================
define arbiter {
    arbiter_name Arbiter-Master
    #host_name   my-shinken-hostname
    address      localhost
    port         7770
    spare        0

    # Modules loaded by the Arbiter.
    modules      PickleRetentionArbiter
}

#=============================================================================
# SCHEDULER
#=============================================================================
# The scheduler is a "Host manager". It gets the hosts and their services,
# schedules the checks and transmit them to the pollers.
# Description: The scheduler is responsible for:
# - Creating the dependancy tree
# - Scheduling checks
# - Calculating states
# - Requesting actions from a reactionner
# - Buffering and forwarding results its associated broker
#=============================================================================
define scheduler {
    scheduler_name     scheduler-1
    address            localhost
    port               7768
    spare              0
    realm              All
    data_timeout       120 ; Data send timeout.
    check_interval     60 ; Ping node every N seconds.
    timeout            3 ; Ping timeout.
    max_check_attempts 3 ; If ping fails N or more, then the node is dead.
    weight             1 ; Only useful in a distributed architecture.
    skip_initial_broks 0 ; Skip initial broks creation for faster boot time.
                         ; Experimental feature which is not stable.

    # Modules loaded by the Scheduler.
    modules            PickleRetentionScheduler
}

#===============================================================================
# POLLER
#===============================================================================
# Description: The poller is responsible for:
# - Active data acquisition
# - Local passive data acquisition
#===============================================================================
define poller {
    poller_name         poller-1
    address             localhost
    port                7771
    spare               0
    realm               All
    data_timeout        120 ; Data send timeout.
    check_interval      60 ; Ping node every N seconds.
    timeout             3 ; Ping timeout.
    max_check_attempts  3 ; If ping fails N or more, then the node is dead.
    manage_sub_realms   0 ; Does it take jobs from schedulers of sub-Realms?
    min_workers         0 ; Starts with N processes (0 => 1 per CPU).
    max_workers         0 ; No more than N processes (0 = 1 per CPU).
    processes_by_worker 256 ; Each worker manages N checks.
    polling_interval    2 ; Get jobs from schedulers each N minutes.
}

#===============================================================================
# BROKER
#===============================================================================
# Description: The broker is responsible for:
# - Exporting centralized logs of all Shinken daemon processes
# - Exporting status data
# - Exporting performance data
# - Exposing Shinken APIs:
#   - Status data
#   - Performance data
#   - Configuration data
#   - Command interface
#===============================================================================
define broker {
    broker_name        broker-1
    address            localhost
    port               7772
    spare              0
    realm              All
    data_timeout       120 ; Data send timeout.
    check_interval     60 ; Ping node every N seconds.
    timeout            3 ; Ping timeout.
    max_check_attempts 3 ; If ping fails N or more, then the node is dead.
    manage_sub_realms  1 ; Does it take jobs from schedulers of sub-Realms?
    manage_arbiters    1 ; Take data from Arbiter. There should be only one
                         ; broker for the arbiter.

    # Modules loaded by the Broker.
    modules            WebUI,PickleRetentionBroker
}

#=============================================================================
# REACTIONNER
#=============================================================================
# Description: The reactionner is responsible for:
# - Executing notification actions
# - Executing event handler actions
#=============================================================================
define reactionner {
    reactionner_name   reactionner-1
    address            localhost
    port               7769
    spare              0
    realm              All
    data_timeout       120 ; Data send timeout.
    check_interval     60 ; Ping node every N seconds.
    timeout            3 ; Ping timeout.
    max_check_attempts 3 ; If ping fails N or more, then the node is dead.
    manage_sub_realms  0 ; Does it take jobs from schedulers of sub-Realms?
    min_workers        1 ; Starts with N processes (0 = 1 per CPU).
    max_workers        15 ; No more than N processes (0 = 1 per CPU).
    polling_interval   1 ; Get jobs from schedulers each 1 second.
}

#==============================================================================
# RECEIVER
#==============================================================================
# The receiver manages passive information. It's just a "buffer" which will
# load passive modules (like NSCA) and be read by the arbiter to dispatch data.
#==============================================================================
define receiver {
    receiver_name      receiver-1
    address            localhost
    port               7773
    spare              0
    realm              All
    data_timeout       120 ; Data send timeout.
    check_interval     60 ; Ping node every N seconds.
    timeout            3 ; Ping timeout.
    max_check_attempts 3 ; If ping fails N or more, then the node is dead.
    direct_routing     0 ; If enabled, it will directly send commands to the
                         ; schedulers if it know about the hostname in the
                         ; command.
}




#==============================================================================
# SUB MODULES LOADED BY THE MAIN MODULES
#==============================================================================

# The WebUI module loaded by the broker.
define module {
    module_name       WebUI
    module_type       webui
    auth_secret       <%= @key4cookies %> ; key used for the cookies contruction.
    host              0.0.0.0
    port              7767
    manage_acl        1 ; Use contacts ACL. 0 allow actions for all.
    play_sound        0 ; Play sound on new non-acknowledged problems.
    allow_html_output 0 ; Allow or not HTML chars in plugins output.
    max_output_length 100 ; Maximum output length for plugin output in webui.

    # Modules loaded by the WebUI.
    <%- if @ldap_account -%>
      <%- ldap_module = 'OpenLDAP_UI,' -%>
    <%- else -%>
      <%- ldap_module = '' -%>
    <%- end -%>
    modules           Cfg_password,Apache_passwd,<%= ldap_module %>SQLitedb
}

# Module loaded by the WebUI.
# Check authentification using the "password" paramter
# directly in the configuration (in the contact object).
define module {
    module_name    Cfg_password
    module_type    cfg_password_webui
}

# Module loaded by the WebUI.
# Check authentification using an Apache password file.
# (you must create it before).
define module {
    module_name    Apache_passwd
    module_type    passwd_webui
    passwd         <%= @htpasswd_file %> ; Absolute path only!
}

<%- if @ldap_account -%>
# Module loaded by the WebUI.
# Check authentification for WebUI using an Open Ldap server.
define module {
    module_name    OpenLDAP_UI
    module_type    ad_webui
    ldap_uri       <%= @ldap_uri %>
    username       <%= @ldap_account %>
    password       <%= @ldap_password %>
    basedn         <%= @ldap_basedn %>
    # For mode you can switch between ad (active dir) and openldap.
    mode           openldap
}

<%- end -%>
# Module loaded by the WebUI.
# Save and read the user preferences.
define module {
    module_name     SQLitedb
    module_type     sqlitedb
    uri             <%= @lib_dir %>/webui_prefs.sqlite
}

# Module loaded by the Scheduler.
# Retention file to keep state between shinken restarts.
define module {
    module_name    PickleRetentionScheduler
    module_type    pickle_retention_file_generic
    path           <%= @lib_dir %>/retention_scheduler.dat
}

# Module loaded by the Broker.
# Retention file to keep state between shinken restarts.
define module {
    module_name    PickleRetentionBroker
    module_type    pickle_retention_file_generic
    path           <%= @lib_dir %>/retention_broker.dat
}

# Module loaded by the Arbiter.
# Retention file to keep state between shinken restarts.
define module {
    module_name    PickleRetentionArbiter
    module_type    pickle_retention_file_generic
    path           <%= @lib_dir %>/retention_arbiter.dat
}

# Just one realm for this simple configuration.
define realm {
    default    1
    realm_name All
}


