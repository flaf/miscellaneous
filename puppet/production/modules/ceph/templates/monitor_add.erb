#!/bin/sh
### This is a file managed by Puppet, don't edit it. ###
<%-
    cluster_name         = scope['::ceph::cluster_name']
    monitor_init         = scope['::ceph::monitor_init']
    monitors             = scope['::ceph::monitors']
    hostname             = scope['::hostname']
    monitor_id           = monitors[hostname]['id']
    monitor_init_address = monitors[monitor_init]['address']
-%>

# The name of the cluster.
cluster='<%= cluster_name %>'

# The ID of the monitor which you want to create.
monitor_id='<%= monitor_id %>'

# The IP address of the inital monitor.
monitor_init_address='<%= monitor_init_address %>'


SCRIPT_NAME=${0##*/}
export LC_ALL=C
export PATH='/usr/sbin:/usr/bin:/sbin:/bin'

options_list='help,test'

if ! TEMP=$(getopt -o "h" -l "$options_list" -n "$SCRIPT_NAME" -- "$@")
then
    echo "Syntax error with $SCRIPT_NAME command." >&2
    exit 1
fi

eval set -- "$TEMP"
unset TEMP

# Default value.
test=false

while true
do
    case "$1" in

        --test)
            test=true
            shift 1
        ;;

        --help|-h)
            echo "The syntax is:"
            echo ""
            echo "    1. $SCRIPT_NAME --test"
            echo "    2. $SCRIPT_NAME"
            echo ""
            echo "1. To test if it's possible to create a monitor."
            echo "2. To create a monitor."
            exit 0
        ;;

        --)
            shift 1
            break
        ;;

    esac
done

test_mon_dir () {
    if [ -d "/var/lib/ceph/mon/$cluster-$monitor_id" ]
    then
        # The monitor working directory already exists.
        return 0
    else
        # The monitor working directory doesn't exist.
        return 1
    fi
}

if "$test"
then
    if test_mon_dir
    then
        printf "The monitor working directory already exists.\n"
        exit 1
    else
        printf "Ok, the monitor working directory doesn't exist yet.\n"
        exit 0
    fi
else
    # No test, but we are still going to test.
    if test_mon_dir
    then
        printf "Sorry but the monitor working directory already exists.\n"
        printf "End of the script.\n"
        exit 1
    fi
fi

# Retrieve the shared monitors key with a request to
# the initial monitor of the cluster. By default the
# command uses the client.admin account and normally
# the /etc/ceph/$cluster.client.admin.conf is already
# present in the local host.
if ! timeout --signal=TERM --kill-after=20 5s ceph auth \
    get mon. -o "/tmp/$cluster.mon.keyring"             \
    -m "$monitor_init_address" --cluster "$cluster"
then
    printf "Request to the initial monitor failed.\n"
    printf "End of the script.\n"
    exit 1
fi

# Retrieve the monitor map with a request to the initial
# monitor in order to initialize the monitor working
# directory this the local host.
ceph mon getmap -o "/tmp/monmap" -m "$monitor_init_address" \
    --cluster "$cluster"

# Creation and initialization of the monitor working directory
# which will be "/var/lib/ceph/mon/$cluster-$monitor_id".
ceph-mon --mkfs -i "$monitor_id" --conf "/etc/ceph/$cluster.conf" \
    --monmap "/tmp/monmap" --keyring "/tmp/$cluster.mon.keyring"  \
    --cluster "$cluster"

# Delete the files in /tmp/.
rm "/tmp/$cluster.mon.keyring"
rm "/tmp/monmap"

# Without these files, the monitor daemon doesn't start.
touch "/var/lib/ceph/mon/$cluster-$monitor_id/done"
touch "/var/lib/ceph/mon/$cluster-$monitor_id/upstart"

# Start the monitor daemon.
stop ceph-mon cluster="$cluster" id="$monitor_id"
sleep 0.5
start ceph-mon cluster="$cluster" id="$monitor_id"


