<%- |
  $gitdir,
  $modulesdir,
  $giturlsfile,
  $pause,
  $update_pp_modules_pid,
| -%>
#!/bin/bash
### This file is managed by Puppet, don't edit it ###

echo $$ ><%= $update_pp_modules_pid %>
export PATH='/opt/puppetlabs/bin:/usr/sbin:/usr/bin:/sbin:/bin'

user=$(id -un)
group=$(id -gn)

if [ "$user" = 'puppetforge' ] && [ "$group" = 'puppetforge' ]
then
    # OK.
    true
else
    echo "Sorry, you must run this program with the puppetforge account." >&2
    exit 1
fi

gitdir='<%= $gitdir %>'
modulesdir='<%= $modulesdir %>'

while true
do

    # Get modules.
    while read # See the input of this read at the end of this loop below.
    do

        # /!\ Yes, this is only bash compatible.
        url="$REPLY"

        # Remove comments and remove spaces.
        url=$(echo "$url" | sed -r 's/([^#]*)[[:space:]]*#?.*$/\1/')
        url=$(echo "$url" | sed -r 's/[[:space:]]//g')

        # It after the previous cleanup the line is empty,
        # we can pass to the next line.
        [ -z "$url" ] && continue

        repo_name=$(echo "$url" | sed -r 's|^.*/([-a-z0-9_]+)\.git$|\1|')

        if [ ! -d "$gitdir/$repo_name" ]
        then
            timeout --kill-after=20s 40s git clone $url "$gitdir/$repo_name" || continue
        fi

        cd "$gitdir/$repo_name"
        timeout --kill-after=20s 40s git pull

        tags=$(git tag | sort -V | tail)
        name=$(cat metadata.json | jq --raw-output '.name')

        for tag in $tags
        do
            full_name="$name-$tag"
            [ -f "$modulesdir/$full_name.tar.gz" ] && continue

            git reset --hard "$tag"
            version=$(cat metadata.json | jq --raw-output '.version')
            # The tag must match with the version number.
            [ "$version" != "$tag"  ] && continue

            mkdir "$modulesdir/$full_name"
            # With find, we copy the .git/ directory too.
            find . -mindepth 1 -maxdepth 1 -exec cp -r '{}' "$modulesdir/$full_name/" \;

            # We add a simple file to identify where the module come from.
            flag_file=".from-$(hostname -f)"
            touch "$modulesdir/$full_name/$flag_file"

            # The goal is that "git status" reports no change when the
            # module is just installed via the puppetforge. But we add
            # new files in this repo. A fist way is to add or edit a
            # .gitignore file, but this file can be versioned so it's
            # not a good idea. The right way is to use the file
            # .git/info/exclude.

            # This file is a list of files that are not in .gitignore
            # (which can be versioned), but which you want to exclude on
            # your machine's copy of the repository. From the docs:
            #
            #       Patterns which are specific to a particular
            #       repository but which do not need to be shared with
            #       other related repositories (e.g., auxiliary files
            #       that live inside the repository but are specific to
            #       one user's workflow) should go into the
            #       $GIT_DIR/info/exclude file.
            #
            # That file .git/info/exclude can not be versioned because
            # it's in the .git directory.
            #
            cat >>"$modulesdir/$full_name/.git/info/exclude" <<EOF
checksums.json
$flag_file
EOF

            # The goal: generate the `checksums.json` file
            # in the pkg/ directory. This file is created by
            # the `puppet module build` command.
            #
            # Normally, the `metadata.json` file generated
            # in pkg/ is the same as the `metadata.json`
            # file of the current module but the form can be
            # different. For instance the number of empty
            # lines at the end of the file can be different
            # so that the md5sum of this file can be
            # different. So, instead to copy verbatim the
            # `checksums.json` file, we need to update the
            # md5sum value of the `metadata.json` entry in
            # the `checksums.json` file.
            puppet module build "$modulesdir/$full_name/"
            md5sum=$(md5sum "$modulesdir/$full_name/metadata.json" | awk '{print $1}')
            jq ".[\"metadata.json\"]=\"${md5sum}\""                    \
                "$modulesdir/$full_name/pkg/$full_name/checksums.json" \
                >"$modulesdir/$full_name/checksums.json"

            # Now, we can remove the pkg/ directory.
            rm -rf --one-file-system "$modulesdir/$full_name/pkg"

            tar -zcvf "$modulesdir/$full_name.tar.gz" "$modulesdir/$full_name"
            rm -rf "$modulesdir/$full_name"
            git reset HEAD^
        done

    done <<%= $giturlsfile %>

    sleep <%= $pause %>

done


